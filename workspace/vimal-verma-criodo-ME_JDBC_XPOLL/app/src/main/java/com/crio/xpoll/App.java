/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xpoll;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import com.crio.xpoll.dao.PollDAO;
import com.crio.xpoll.dao.ResponseDAO;
import com.crio.xpoll.dao.UserDAO;
import com.crio.xpoll.model.Choice;
import com.crio.xpoll.model.Poll;
import com.crio.xpoll.model.PollSummary;
import com.crio.xpoll.model.User;
import com.crio.xpoll.util.DatabaseConnection;
import com.crio.xpoll.util.DatabaseSetup;

public class App {

    private static final String RESET = "\033[0m";  // Text Reset
    private static final String CYAN = "\033[0;36m";    // CYAN
    private static final String GREEN = "\033[0;32m";   // GREEN
    private static final String RED = "\033[0;31m"; // RED

    private static Scanner scanner = new Scanner(System.in);
    private static DatabaseConnection dbConnection;
    private static UserDAO userDAO;
    private static PollDAO pollDAO;
    private static ResponseDAO responseDAO;

    public String getGreeting() {
        return "Welcome to xPoll!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        // Load properties from application.properties
        Properties properties = new Properties();
        try (InputStream input = App.class.getClassLoader().getResourceAsStream("application.properties")) {
            if (input == null) {
                System.out.println("Sorry, unable to find application.properties");
                return;
            }
            // Load properties file
            properties.load(input);

            // Get the property values
            String url = properties.getProperty("db.url");
            String username = properties.getProperty("db.username");
            String password = properties.getProperty("db.password");
            String driverClassName = properties.getProperty("jdbc.driverClassName");

            // Initialize database connection
            dbConnection = DatabaseConnection.getInstance(url, username, password, driverClassName);
            userDAO = new UserDAO(dbConnection);
            pollDAO = new PollDAO(dbConnection);
            responseDAO = new ResponseDAO(dbConnection);

        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Setup the database
        DatabaseSetup.executeSQLScript(dbConnection);

        while (true) {
            System.out.println(CYAN);
            System.out.println("Select an option:");
            System.out.println("1. Create an account");
            System.out.println("2. Create a poll");
            System.out.println("3. Respond to a poll");
            System.out.println("4. View poll summary");
            System.out.println("5. Close a poll");
            System.out.println("6. Exit");
            System.out.println(RESET);

            int choice = Integer.parseInt(scanner.nextLine());

            try {
                switch (choice) {
                    case 1:
                        createUser();
                        break;
                    case 2:
                        createPoll();
                        break;
                    case 3:
                        respondToPoll();
                        break;
                    case 4:
                        viewPollSummary();
                        break;
                    case 5:
                        closePoll();
                        break;
                    case 6:
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
                System.out.println(RESET);
            } catch (SQLException e) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                String stackTrace = sw.toString();
                System.out.println(RED + stackTrace + RESET);
            }
        }
    }

    private static void createUser() throws SQLException {
        System.out.println("Enter username:");
        String username = scanner.nextLine();
        System.out.println("Enter password:");
        String password = scanner.nextLine();

        User user = userDAO.createUser(username, password);
        System.out.println(GREEN);
        System.out.println("User created with ID: " + user.getUserId());
    }

    private static void createPoll() throws SQLException {
        System.out.println("Enter user ID:");
        int userId = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter poll question:");
        String question = scanner.nextLine();

        System.out.println("Enter number of choices:");
        int numChoices = Integer.parseInt(scanner.nextLine());

        List<String> choices = new ArrayList<>();
        for (int i = 0; i < numChoices; i++) {
            System.out.println("Enter choice text for choice " + (i + 1) + ":");
            String choiceText = scanner.nextLine();
            choices.add(choiceText);
        }

        Poll poll = pollDAO.createPoll(userId, question, choices);
        System.out.println(GREEN);
        System.out.println("Poll created with ID: " + poll.getId() + " and choices added successfully.");
    }

    private static void respondToPoll() throws SQLException {
        System.out.println("Enter poll ID:");
        int pollId = Integer.parseInt(scanner.nextLine());

        Poll poll = pollDAO.getPoll(pollId);
        if (poll.isClosed()) {
            System.out.println(RED + "Poll is closed. You cannot respond to this poll." + RESET);
            return;
        }

        System.out.println(GREEN + "Poll Question: " + poll.getQuestion());
        for (Choice choice : poll.getChoices()) {
            System.out.println("Choice ID: " + choice.getId() + " - " + choice.getChoiceText());
        }
        System.out.println(RESET);
        System.out.println("Enter choice ID:");
        int choiceId = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter user ID:");
        int userId = Integer.parseInt(scanner.nextLine());

        responseDAO.createResponse(pollId, choiceId, userId);
        System.out.println(GREEN);
        System.out.println("Response recorded.");
    }

    private static void closePoll() throws SQLException {
        System.out.println("Enter poll ID:");
        int pollId = Integer.parseInt(scanner.nextLine());

        pollDAO.closePoll(pollId);
        System.out.println(GREEN);
        System.out.println("Poll closed.");
    }

    private static void viewPollSummary() throws SQLException {
        System.out.println("Enter poll ID:");
        int pollId = Integer.parseInt(scanner.nextLine());

        List<PollSummary> summaries = pollDAO.getPollSummaries(pollId);
        System.out.println(GREEN);
        for (PollSummary summary : summaries) {
            System.out.println(summary.getQuestion() + ": " + summary.getChoiceText() + " - " + summary.getResponseCount() + " responses");
        }
    }
}