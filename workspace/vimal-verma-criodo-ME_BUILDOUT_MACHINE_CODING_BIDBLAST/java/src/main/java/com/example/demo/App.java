/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.demo;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import com.example.demo.entities.Event;
import com.example.demo.entities.Greeting;
import com.example.demo.entities.Member;
import com.example.demo.repositories.EventRepo;
import com.example.demo.repositories.GreetingRepository;
import com.example.demo.repositories.IEventRepo;
import com.example.demo.repositories.IGreetingRepository;
import com.example.demo.repositories.IMemberRepo;
import com.example.demo.repositories.MemberRepo;
import com.example.demo.services.EventService;
import com.example.demo.services.GreetingService;
import com.example.demo.services.MemberServive;

public class App {

    // Initialize repositories
    private final IGreetingRepository greetingRepository = new GreetingRepository();

    private final IMemberRepo memberRepo = new MemberRepo();
    private final IEventRepo eventRepo = new EventRepo();

    // Initialize services
    private final GreetingService greetingService = new GreetingService(greetingRepository);

    private final MemberServive memberServive = new MemberServive(memberRepo);
    private final EventService eventService = new EventService(eventRepo);

    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1) {
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }

        // OR
        // Test your code by ading commands in this list
        List<String> inplace_commands = new LinkedList<>() {
            {
                add("CREATE_GREETING,Hello World!");
                add("CREATE_GREETING,Bye World!");
                add("LIST_GREETING");
                add("GET_GREETING,1");
            }
        };

        new App().run(inplace_commands);

    }

    public void run(List<String> commands) {

        Iterator<String> it = commands.iterator();
        while (it.hasNext()) {
            String line = it.next();
            if (line == null) {
                break;
            }
            List<String> tokens = Arrays.asList(line.split(","));

            try {
                // Execute Services
                switch (tokens.get(0)) {
                    case "CREATE_GREETING":
                        CREATE_GREETING(tokens);
                        break;
                    case "LIST_GREETING":
                        LIST_GREETING(tokens);
                        break;
                    case "GET_GREETING":
                        GET_GREETING(tokens);
                        break;
                    // Add More case statements below to support other commands

                    case "ADD_MEMBER":
                        ADD_MEMBER(tokens);
                        break;

                    case "ADD_EVENT":
                        ADD_EVENT(tokens);
                        break;

                    case "REGISTER_MEMBER":
                        REGISTER_MEMBER(tokens);
                        break;

                    case "SUBMIT_BID":
                        SUBMIT_BID(tokens);
                        break;

                    case "DECLARE_WINNER":
                        DECLARE_WINNER(tokens);
                        break;

                    default:
                        throw new RuntimeException("INVALID_COMMAND");
                }
            } catch (Exception e) {
                System.out.println("ERROR: " + e.getMessage());
            }
        }
    }


    // CREATE_GREETING
    private void CREATE_GREETING(List<String> tokens) {
        String message = tokens.get(1);
        Greeting createGreet = greetingService.create(message);
        System.out.println(createGreet);
    }

    // LIST_GREETING
    private void LIST_GREETING(List<String> tokens) {
        List<Greeting> glist = greetingService.getAllGreetings();
        System.out.println(glist);
    }

    // GET_GREETING
    private void GET_GREETING(List<String> tokens) {
        Long id = Long.parseLong(tokens.get(1));
        Greeting getGreet = greetingService.getGreeting(id);
        System.out.println(getGreet);
    }

    public void ADD_MEMBER(List<String> tokens) {
        String name = tokens.get(1);
        Long superCoins = Long.parseLong(tokens.get(2));

        Member member = memberServive.addMember(name, superCoins);
        System.out.println("MEMBER_ADDED " + member.getId());
    }

    public void ADD_EVENT(List<String> tokens) {
        String name = tokens.get(1);
        String prize = tokens.get(2);
        LocalDate date = LocalDate.parse(tokens.get(3));

        Event event = eventService.addEvent(name, prize, date);
        System.out.println("EVENT_ADDED " + event.getId());
    }

    public void REGISTER_MEMBER(List<String> tokens) {
        Long memberId = Long.parseLong(tokens.get(1));
        Long eventId = Long.parseLong(tokens.get(2));
        Member member = memberRepo.findById(memberId)
                .orElseThrow(() -> new RuntimeException("MEMBER_NOT_EXIST"));
        Event event = eventRepo.findById(eventId)
                .orElseThrow(() -> new RuntimeException("EVENT_NOT_EXIST"));

        event.setMembers(member);
        System.out.println("MEMBER_REGISTERED " + member.getName() + " " + event.getName());
    }

    public void SUBMIT_BID(List<String> tokens) {
        Long memberId = Long.parseLong(tokens.get(1));
        // Long eventId = Long.parseLong(tokens.get(2));
        Member member = memberRepo.findById(memberId)
                .orElseThrow(() -> new RuntimeException("MEMBER_NOT_EXIST"));
        // Event event = eventRepo.findById(eventId)
        //         .orElseThrow(() -> new RuntimeException("EVENT_NOT_EXIST"));

        Long maxBid = 0L;
        for (int i = 3; i < tokens.size(); i++) {
            Long bid = Long.parseLong(tokens.get(i));
            if (bid <= member.getSuperCoins() && bid > maxBid) {
                // member.setBids(bid);
                maxBid = bid;
            }
        }
        member.setBid(maxBid);
        System.out.println("BIDS_SUBMITTED");
    }


    public void DECLARE_WINNER(List<String> tokens) {
        Long eventId = Long.parseLong(tokens.get(1));
        Event event = eventRepo.findById(eventId)
                .orElseThrow(() -> new RuntimeException("EVENT_NOT_EXIST"));

        List<Member> members = event.getMembers();

        String winnerName = null;
        Long maxBid = 0L;

        for (Member member : members) {
            // List<Long> bids=member.getBids();
            Long bid = member.getBid();
            if (bid > maxBid) {
                maxBid = bid;
                winnerName = member.getName();
            }

        }
        System.out.print(winnerName);
    }

}
