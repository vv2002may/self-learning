/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xlido;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import com.crio.xlido.entities.Event;
import com.crio.xlido.entities.Question;
import com.crio.xlido.entities.User;
import com.crio.xlido.repositories.EventRepository;
import com.crio.xlido.repositories.IEventRepository;
import com.crio.xlido.repositories.IQuestionRepository;
import com.crio.xlido.repositories.IUserRepository;
import com.crio.xlido.repositories.QuestionRepository;
import com.crio.xlido.repositories.UserRepository;
import com.crio.xlido.services.EventService;
import com.crio.xlido.services.QuestionService;
import com.crio.xlido.services.UserService;

public class App {
    // Initialize repository
    private final IUserRepository userRepository = new UserRepository();
    private final IEventRepository eventRepository = new EventRepository();
    private final IQuestionRepository questionRepository = new QuestionRepository();

    // Initialize services
    private final UserService userService = new UserService(userRepository);
    private final EventService eventService = new EventService(eventRepository, userRepository);
    private final QuestionService questionService =
            new QuestionService(questionRepository, eventRepository, userRepository);

    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1) {
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }

        // OR
        // Test your code by adding commands in this list
        List<String> inplace_commands = new LinkedList<>() {
            {
            }
        };

        new App().run(inplace_commands);

    }

    public void run(List<String> commands) {

        Iterator<String> it = commands.iterator();
        while (it.hasNext()) {
            String line = it.next();
            if (line == null) {
                break;
            }
            List<String> tokens = Arrays.asList(line.split(","));

            try {
                // Execute Services
                switch (tokens.get(0)) {
                    case "CREATE_USER":
                        CREATE_USER(tokens);
                        break;
                    case "CREATE_EVENT":
                        CREATE_EVENT(tokens);
                        break;
                    case "DELETE_EVENT":
                        DELETE_EVENT(tokens);
                        break;
                    case "ADD_QUESTION":
                        ADD_QUESTION(tokens);
                        break;
                    case "DELETE_QUESTION":
                        DELETE_QUESTION(tokens);
                        break;
                    case "UPVOTE_QUESTION":
                        UPVOTE_QUESTION(tokens);
                        break;
                    case "REPLY_QUESTION":
                        REPLY_QUESTION(tokens);
                        break;
                    case "LIST_QUESTIONS":
                        LIST_QUESTIONS(tokens);
                        break;
                    default:
                        throw new RuntimeException("INVALID_COMMAND");
                }
            } catch (Exception e) {
                System.out.println("ERROR: " + e.getMessage());
            }
        }
    }

    private void CREATE_USER(List<String> tokens) {
        String email = tokens.get(1);
        String password = tokens.get(2);
        User user = userService.createUser(email, password);
        System.out.println("User ID: " + user.getId());
    }

    private void CREATE_EVENT(List<String> tokens) {
        String name = tokens.get(1);
        Long organizerId = Long.valueOf(tokens.get(2));
        try {
            Event event = eventService.createEvent(name, organizerId);
            System.out.println("Event ID: " + event.getId());
        } catch (RuntimeException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void DELETE_EVENT(List<String> tokens) {
        Long eventId = Long.valueOf(tokens.get(1));
        Long userId = Long.valueOf(tokens.get(2));
        try {
            Boolean isDeleted = eventService.deleteEvent(eventId, userId);
            if (isDeleted) {
                System.out.println("EVENT_DELETED " + eventId);
            }
        } catch (RuntimeException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void ADD_QUESTION(List<String> tokens) {
        String content = tokens.get(1);
        Long userId = Long.valueOf(tokens.get(2));
        Long eventId = Long.valueOf(tokens.get(3));
        try {
            Question question = questionService.addQuestion(content, userId, eventId);
            System.out.println("Question ID: " + question.getId());
        } catch (RuntimeException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void DELETE_QUESTION(List<String> tokens) {
        Long questionId = Long.valueOf(tokens.get(1));
        Long userId = Long.valueOf(tokens.get(2));

        try {
            questionService.deleteQuestion(questionId, userId);
            System.out.println("QUESTION_DELETED " + questionId);
        } catch (RuntimeException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void UPVOTE_QUESTION(List<String> tokens) {
        Long questionId = Long.valueOf(tokens.get(1));
        Long userId = Long.valueOf(tokens.get(2));

        try {
            questionService.upvoteQuestion(questionId, userId);
            System.out.println("QUESTION_UPVOTED " + questionId);
        } catch (RuntimeException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void REPLY_QUESTION(List<String> tokens) {
        String content = tokens.get(1);
        Long questionId = Long.valueOf(tokens.get(2));
        Long userId = Long.valueOf(tokens.get(3));

        try {
            questionService.replyQuestion(content, questionId, userId);;
            System.out.println("REPLY_ADDED");
        } catch (RuntimeException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void LIST_QUESTIONS(List<String> tokens) {
        Long eventId = Long.valueOf(tokens.get(1));
        String sortBy = tokens.get(2);
        try {
            List<Question> questions = questionService.listQuestions(eventId, sortBy);
            for (Question question : questions) {
                System.out.println("Question ID: " + question.getId());
                System.out.println("Content: " + question.getContent());
                System.out.println("Votes: " + question.getVoteCount());
                System.out.println("Replies:");
                question.getReply().forEach(
                        (key, value) -> System.out.println("  - User " + key + ": " + value));
                System.out.println();

            }
        } catch (RuntimeException e) {
            System.out.println("ERROR: " + e.getMessage());
        }
    }
}
