/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xnews;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class AppTest {

    // Define the path for the temporary JSON file used in tests
    private static final String TEST_FILE_PATH = "test_users.json";
    private File testFile;

    /**
     * Set up the test environment by creating a temporary JSON file with test data.
     *
     * @throws IOException if an I/O error occurs during file creation or writing.
     */
    @BeforeEach
    public void setUp() throws IOException {
        // Create a new file instance for the test JSON file
        testFile = new File(TEST_FILE_PATH);
        
        // Create a FileWriter to write test data to the JSON file
        FileWriter writer = new FileWriter(testFile);
        
        // Write test data to the JSON file
        writer.write("[{\"name\":\"John Doe\",\"query\":\"technology\",\"language\":\"en\",\"sortBy\":\"relevance\"}," +
                "{\"name\":\"Jane Doe\",\"query\":\"health\",\"language\":\"es\",\"sortBy\":\"popularity\"}]");
        writer.close(); // Close the writer to ensure data is written to the file
    }

    /**
     * Clean up the test environment by deleting the temporary JSON file.
     */
    @AfterEach
    public void tearDown() {
        // Delete the test JSON file if it exists
        if (testFile.exists()) {
            testFile.delete();
        }
    }

    /**
     * Test the readUserPreferences method to ensure it correctly parses the JSON file.
     *
     * @throws IOException if an I/O error occurs during file reading.
     */
    @Test
    public void testReadUserPreferences() throws IOException {
        // Call the method to read user preferences from the JSON file
        List<UserPreference> userPreferences = App.readUserPreferences(TEST_FILE_PATH);

        // Assert that the list is not null
        assertNotNull(userPreferences);
        
        // Assert that the list contains exactly 2 user preferences
        assertEquals(2, userPreferences.size());

        // Validate the first user preference
        UserPreference user1 = userPreferences.get(0);
        assertEquals("John Doe", user1.getName());
        assertEquals("technology", user1.getQuery());
        assertEquals("en", user1.getLanguage());
        assertEquals("relevance", user1.getSortBy());

        // Validate the second user preference
        UserPreference user2 = userPreferences.get(1);
        assertEquals("Jane Doe", user2.getName());
        assertEquals("health", user2.getQuery());
        assertEquals("es", user2.getLanguage());
        assertEquals("popularity", user2.getSortBy());
    }
}